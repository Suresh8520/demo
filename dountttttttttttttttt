# Server information
$serverA = "ServerA"
$serverB = "ServerB"

# Path to the executable on Server A
$exePath = "\\$serverA\Share\YourExecutable.exe"

# Command to run the executable on Server B
$remoteCommand = {
    param($exePath)
    # Run the executable on Server B
    Start-Process -FilePath $exePath -ArgumentList "/disable"
}

# Copy the executable to Server A's shared folder
Copy-Item -Path "C:\Path\To\YourExecutable.exe" -Destination "\\$serverA\Share" -Force

# Run the command on Server B through Server A
Invoke-Command -ComputerName $serverB -ScriptBlock $remoteCommand -ArgumentList $exePath

==============================================================================================

# Configuration
$sourceServer = "Server1"   # Replace with the name of the source server
$targetServer = "Server2"   # Replace with the name of the target server
$xmlFilePath = "C:\Path\To\Your\File.xml"  # Replace with the actual path to your XML file

# Run XML file on the source server
Invoke-Command -ComputerName $sourceServer -ScriptBlock {
    param($xmlPath)
    # Replace with the command you use to run the XML file
    # For example:
    # Start-Process "C:\Path\To\Executable.exe" -ArgumentList "/xmlFile=$xmlPath"
} -ArgumentList $xmlFilePath

# Disable task on the target server
Invoke-Command -ComputerName $targetServer -ScriptBlock {
    # Replace "YourTaskName" with the name of the task you want to disable
    $taskName = "YourTaskName"
    
    # Get the task
    $task = Get-ScheduledTask -TaskName $taskName
    
    if ($task -ne $null) {
        Disable-ScheduledTask -Task $task -Confirm:$false
        Write-Host "Task '$taskName' disabled on $env:COMPUTERNAME."
    } else {
        Write-Host "Task '$taskName' not found on $env:COMPUTERNAME."
    }
}

====================================================================================================

# Set the server names
$server1 = "ServerName1"
$server2 = "ServerName2"

# Set the condition flag
$runOnServer1 = $true  # Set this to $false if the condition is not met

# Set the path to the XML job file
$xmlJobFilePath = "C:\Path\to\your\job.xml"

# Define the trigger time (24-hour format)
$triggerTime = "23:00"  # Change this to the desired time

# Check the condition and schedule tasks accordingly
if ($runOnServer1) {
    # Schedule task on Server 1
    $taskAction = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-File '$xmlJobFilePath'"
    $taskTrigger = New-ScheduledTaskTrigger -At $triggerTime
    Register-ScheduledTask -Action $taskAction -Trigger $taskTrigger -TaskName "XMLJobOnServer1" -Description "Run XML job on Server 1"
}

# Always schedule the task on Server 2
$taskAction = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-File '$xmlJobFilePath'"
$taskTrigger = New-ScheduledTaskTrigger -At $triggerTime
Register-ScheduledTask -Action $taskAction -Trigger $taskTrigger -TaskName "XMLJobOnServer2" -Description "Run XML job on Server 2"

====================================================================
# Set your AWS credentials and region
Set-AWSCredentials -AccessKey 'YOUR_ACCESS_KEY' -SecretKey 'YOUR_SECRET_KEY' -StoreAs 'MyCredentials'
Set-DefaultAWSRegion -Region 'us-east-1'  # Change to your desired region

# Define the EC2 instance IDs for the two instances you want to control
$Instance1Id = 'i-XXXXXXXXXXXXX'  # Replace with the actual instance ID
$Instance2Id = 'i-YYYYYYYYYYYYY'  # Replace with the actual instance ID

# Define the command to run on the instances
$CommandToRun = 'C:\path\to\your\executable.exe -xmlJobFile C:\path\to\your\job.xml'

# Define the schedule (UTC time)
$StartTime = Get-Date '2023-09-01 08:00:00'
$EndTime = Get-Date '2023-09-01 20:00:00'

# Check if the current time is within the specified schedule
$CurrentTime = Get-Date
if ($CurrentTime -ge $StartTime -and $CurrentTime -le $EndTime) {
    # If the current time is within the schedule, enable the first instance and run the command
    Start-EC2Instance -InstanceId $Instance1Id
    Invoke-Command -Instance $Instance1Id -ScriptBlock { param($command) Invoke-Expression $command } -ArgumentList $CommandToRun
}
else {
    # If the current time is outside the schedule, disable the first instance
    Stop-EC2Instance -InstanceId $Instance1Id
}

# Disable the second instance to prevent it from running the job
Stop-EC2Instance -InstanceId $Instance2Id

